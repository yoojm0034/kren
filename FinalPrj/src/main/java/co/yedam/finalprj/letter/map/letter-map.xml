<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="co.yedam.finalprj.letter.map.LetterMap">
	<!-- 나에게 편지를 보낸 친구목록 -->
	<select id="selectAllFriend" parameterType="co.yedam.finalprj.letter.vo.LetterVO" resultType="co.yedam.finalprj.letter.vo.LetterVO">
		SELECT F.USER_ID, U.NAME FROM (SELECT DISTINCT USER_ID
								         FROM LETTER
								        WHERE TO_ID = #{to_id}) F, USERS U
		 WHERE F.USER_ID = U.USER_ID
	     ORDER BY NAME
	</select>
	
	<!-- 답장 안한 편지목록 -->
	<select id="selectNewLetter" parameterType="co.yedam.finalprj.letter.vo.LetterVO" resultType="co.yedam.finalprj.letter.vo.LetterVO">
		SELECT L.*, U.NAME FROM LETTER L, USERS U
		 WHERE L.USER_ID=U.USER_ID
    	   AND SEND_YN ='N'
    	   AND TO_DELETE='N'
		   AND TO_ID =#{to_id}
		   AND ARRIVE_DATE IS NOT NULL
		   AND GUBUN !='임시저장'
		 ORDER BY ARRIVE_DATE DESC
	</select>
	
	<!-- 받는이(TO_ID)가 답장해야할 차례 / 답장해야하는 유저아이디 한건 조회 -->
	<select id="replyLetter" parameterType="co.yedam.finalprj.letterc.vo.LettercVO" resultType="co.yedam.finalprj.letterc.vo.LettercVO">
		WITH R AS (
	 				SELECT * FROM LETTER_FROM_V
		     		 WHERE TO_ID =#{to_id} AND USER_ID =#{user_id} AND GUBUN != '임시저장'
		        		OR TO_ID =#{user_id} AND USER_ID =#{to_id} AND GUBUN != '임시저장'
		  	         ORDER BY ARRIVE_DATE DESC
	 			  )
		SELECT DISTINCT FIRST_VALUE(TO_ID) OVER(ORDER BY SEND_DATE DESC) AS USER_ID
	  	  FROM R
 	</select>
	
	<!-- 해당친구이름과 해당편지목록 -->
	<select id="selectFriendLetter" parameterType="co.yedam.finalprj.letter.vo.LetterVO" resultType="co.yedam.finalprj.letter.vo.LetterVO">
 		WITH TEST AS (SELECT U.NAME AS TO_NAME, T.*
 		 				FROM (
 						     SELECT U.NAME, L.LETTER_ID, L.TO_ID, L.USER_ID, L.SEND_DATE, L.CONTENT, L.PHOTO,
 						     	 	L.READ_DATE, L.TO_DELETE, L.FROM_DELETE, L.ARRIVE_DATE, L.SEND_YN, L.GUBUN, L.COR_YN
 						       FROM LETTER L, USERS U
  							  WHERE L.USER_ID = U.USER_ID) T, USERS U
  					   WHERE T.TO_ID=U.USER_ID
  						 AND GUBUN != '임시저장')
		SELECT * FROM TEST
		 WHERE TO_ID =#{to_id} AND USER_ID =#{user_id} AND TO_DELETE='N'
		    OR TO_ID =#{user_id} AND USER_ID =#{to_id} AND FROM_DELETE='N'
		 ORDER BY ARRIVE_DATE DESC
	</select>
	
	<!-- 임시저장한 편지조회 -->
	<select id="selectSaveLetter" parameterType="co.yedam.finalprj.letter.vo.LetterVO" resultType="co.yedam.finalprj.letter.vo.LetterVO">
		SELECT U.NAME, L.* FROM LETTER L, USERS U
		 WHERE L.TO_ID=U.USER_ID
		   AND L.USER_ID =#{user_id}
		   AND L.GUBUN ='임시저장'
      	   AND L.FROM_DELETE = 'N'
		 ORDER BY SEND_DATE DESC
	</select>
	
	<!-- 우표 체크 -->
	<select id="stampLetterCheck" parameterType="co.yedam.finalprj.letterc.vo.LettercVO" resultType="int">
		SELECT STAMP FROM USERS
		 WHERE USER_ID =#{user_id}
	</select>
	
	<!-- 편지 작성 -->
	<!-- 거리KM만큼 걸리는 시간+send_date = arrive_date 조건문 추가 필요-->
	<insert id="insertLetter" parameterType="co.yedam.finalprj.letter.vo.LetterVO">
		<selectKey keyProperty="distance" resultType="int" order="BEFORE">
			SELECT TRUNC(CAL(#{to_id}, #{user_id}),0) FROM DUAL
		</selectKey>
		
		INSERT INTO LETTER
			(LETTER_ID, TO_ID, USER_ID, CONTENT, PHOTO, GUBUN, ARRIVE_DATE)
		VALUES
			('letter_'||letter_seq.nextval, #{to_id}, #{user_id}, #{content}, #{photo, jdbcType=VARCHAR},#{gubun}
		<choose>
		<when test="distance lt 300">
			, SYSDATE+(INTERVAL '1' HOUR))
		</when>
		<when test="distance lt 2000">
			, SYSDATE+(INTERVAL '4' HOUR))
		</when>
		<when test="distance lt 4000">
			, SYSDATE+(INTERVAL '8' HOUR))
		</when>
		<when test="distance lt 6000">
			, SYSDATE+(INTERVAL '12' HOUR))
		</when>
		<when test="distance lt 8000">
			, SYSDATE+(INTERVAL '16' HOUR))
		</when>
		<when test="distance lt 10000">
			, SYSDATE+(INTERVAL '20' HOUR))
		</when>
		<when test="distance gte 10000">
			, SYSDATE+(INTERVAL '1' DAY))
		</when>
		</choose>
	</insert>
	
	<!-- 답장내역 업데이트 -->
	<update id="updateLetterSendYN" parameterType="co.yedam.finalprj.letter.vo.LetterVO">
		UPDATE LETTER SET SEND_YN = 'Y'
		 WHERE LETTER_ID = #{letter_id}
	</update>
	
	<!-- 우표개수 차감 -->
	<update id="updateLetterStampMinus" parameterType="co.yedam.finalprj.letter.vo.LetterVO">
		UPDATE USERS SET STAMP = STAMP - 1
		WHERE USER_ID = #{user_id}
	</update>
	
	<!-- 우표사용내역 등록 -->
	<insert id="insertLetterStamph" parameterType="co.yedam.finalprj.letter.vo.LetterVO">
		INSERT INTO STAMPH
			(STAMPH_ID, SH_TYPE, SH_DT, TO_ID, USER_ID, CNT)
		VALUES
			('stamph_'||stamph_seq.nextval, '편지작성', SYSDATE, #{to_id}, #{user_id}, 1)
	</insert>
	<!-- /편지 작성 -->
	
	<!-- 임시편지 -->
	<!-- 수정 -->
	<update id="updateSavedLetter" parameterType="co.yedam.finalprj.letter.vo.LetterVO">
		<selectKey keyProperty="distance" resultType="int" order="BEFORE">
			SELECT TRUNC(CAL(#{to_id}, #{user_id}),0) FROM DUAL
		</selectKey>
		
		UPDATE LETTER
		   SET CONTENT=#{content}, PHOTO=#{photo, jdbcType=VARCHAR}, GUBUN=#{gubun}, SEND_DATE=SYSDATE
		<choose>
		<when test="distance lt 300">
			, ARRIVE_DATE = SYSDATE+(INTERVAL '1' HOUR)
		</when>
		<when test="distance lt 2000">
			, ARRIVE_DATE = SYSDATE+(INTERVAL '4' HOUR)
		</when>
		<when test="distance lt 4000">
			, ARRIVE_DATE = SYSDATE+(INTERVAL '8' HOUR)
		</when>
		<when test="distance lt 6000">
			, ARRIVE_DATE = SYSDATE+(INTERVAL '12' HOUR)
		</when>
		<when test="distance lt 8000">
			, ARRIVE_DATE = SYSDATE+(INTERVAL '16' HOUR)
		</when>
		<when test="distance lt 10000">
			, ARRIVE_DATE = SYSDATE+(INTERVAL '20' HOUR)
		</when>
		<when test="distance gte 10000">
			, ARRIVE_DATE = SYSDATE+(INTERVAL '1' DAY)
		</when>
		</choose>
		WHERE LETTER_ID=#{letter_id}
	</update>
	
	<!-- 임시편지함에서 답장내역 업데이트 -->
	<update id="updateSavedSendYN" parameterType="co.yedam.finalprj.letter.vo.LetterVO">
		<selectKey keyProperty="lid" resultType="String" order="BEFORE">
			SELECT F_WHAT_SEND(#{to_id}, #{user_id}) FROM DUAL
		</selectKey>
		UPDATE LETTER SET SEND_YN = 'Y'
		 WHERE LETTER_ID = #{lid}
	</update>
	<!-- /임시편지 -->
	
	<!-- 편지 삭제 -->
	<!-- 내가 작성자라면 FROM_DELETE / 작성자가 아니라면 TO_DATE -->	
	<update id="deleteLetter" parameterType="co.yedam.finalprj.letter.vo.LetterVO">
		<selectKey keyProperty="uid" resultType="String" order="BEFORE">
			SELECT USER_ID FROM LETTER
			 WHERE LETTER_ID =#{letter_id} 
		</selectKey>
		<choose>
		<when test='user_id == uid'>
		UPDATE LETTER SET FROM_DELETE = 'Y' 
		 WHERE LETTER_ID =#{letter_id}
		   AND USER_ID =#{user_id}
		</when>
		<otherwise>
		UPDATE LETTER SET TO_DELETE = 'Y' 
		 WHERE LETTER_ID =#{letter_id}
		   AND TO_ID =#{user_id}
		</otherwise>
		</choose>
	</update>

</mapper>