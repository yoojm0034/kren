<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="co.yedam.finalprj.letter.map.LetterMap">
	<!-- 나에게 편지를 보낸 친구목록 -->
	<select id="selectAllFriend" parameterType="co.yedam.finalprj.letter.vo.LetterVO" resultType="co.yedam.finalprj.letter.vo.LetterVO">
		SELECT  L.USER_ID, U.NAME, L.SEND_DATE, L.ARRIVE_DATE FROM LETTER L, USERS U
		 WHERE L.USER_ID=U.USER_ID
    	   AND L.TO_ID =#{to_id}
    	   AND L.USER_ID IN (SELECT DISTINCT USER_ID FROM LETTER WHERE USER_ID NOT IN #{to_id})
		 ORDER BY ARRIVE_DATE DESC
	</select>
	
	<!-- 답장 안한 편지목록 -->
	<select id="selectNewLetter" parameterType="co.yedam.finalprj.letter.vo.LetterVO" resultType="co.yedam.finalprj.letter.vo.LetterVO">
		SELECT L.*, U.NAME FROM LETTER L, USERS U
		 WHERE L.USER_ID=U.USER_ID
    	   AND SEND_YN ='N'
    	   AND TO_DELETE='N'
		   AND TO_ID =#{to_id}
		   AND ARRIVE_DATE IS NOT NULL
		 ORDER BY ARRIVE_DATE DESC
	</select>
	
	<!-- 해당친구이름과 해당편지목록 -->
	<select id="selectFriendLetter" parameterType="co.yedam.finalprj.letter.vo.LetterVO" resultType="co.yedam.finalprj.letter.vo.LetterVO">
 		SELECT * FROM LETTER_FROM_V
		 WHERE TO_ID =#{to_id} AND USER_ID =#{user_id} AND TO_DELETE='N'
		    OR TO_ID =#{user_id} AND USER_ID =#{to_id} AND FROM_DELETE='N'
		 ORDER BY ARRIVE_DATE DESC
	</select>
	
	<!-- 임시저장한 편지조회 -->
	<select id="selectSaveLetter" parameterType="co.yedam.finalprj.letter.vo.LetterVO" resultType="co.yedam.finalprj.letter.vo.LetterVO">
		SELECT L.*, U.NAME FROM LETTER L, USERS U
		 WHERE L.USER_ID=U.USER_ID
		   AND L.USER_ID =#{user_id}
		   AND GUBUN ='임시저장'
		 ORDER BY SEND_DATE DESC
	</select>
	
	<!-- 편지 작성 -->
	<!-- 거리만큼 걸리는 시간+send_date = arrive_date 조건문 추가 필요-->
	<insert id="insertLetter" parameterType="co.yedam.finalprj.letter.vo.LetterVO">
		<selectKey keyProperty="distance" resultType="int" order="BEFORE">
			SELECT TRUNC(CAL(#{to_id}, #{user_id}),0) FROM DUAL
		</selectKey>
		INSERT INTO LETTER
			(LETTER_ID, TO_ID, USER_ID, CONTENT, PHOTO, GUBUN)
		VALUES
			('letter_'||letter_seq.nextval, #{to_id}, #{user_id}, #{content}, #{photo, jdbcType=VARCHAR}, #{gubun})			
	</insert>
	
	<!-- 편지 삭제 -->
	<!-- 내가 작성자라면 FROM_DELETE / 작성자가 아니라면 TO_DATE -->	
	<update id="deleteLetter" parameterType="co.yedam.finalprj.letter.vo.LetterVO">
		<selectKey keyProperty="uid" resultType="String" order="BEFORE">
			SELECT USER_ID FROM LETTER
			 WHERE LETTER_ID =#{letter_id} 
		</selectKey>
		<choose>
		<when test='user_id == uid'>
		UPDATE LETTER SET FROM_DELETE = 'Y' 
		 WHERE LETTER_ID =#{letter_id}
		   AND USER_ID =#{user_id}
		</when>
		<otherwise>
		UPDATE LETTER SET TO_DELETE = 'Y' 
		 WHERE LETTER_ID =#{letter_id}
		   AND TO_ID =#{user_id}
		</otherwise>
		</choose>
	</update>

</mapper>